function handleAuthentication(dados, manager, tokenService) {
    try {
        const authenticationToken = new UsernamePasswordAuthenticationToken(dados.login, dados.senha);
        const authentication = manager.authenticate(authenticationToken);

        const tokenJWT = tokenService.gerarToken(authentication.principal);

        return { success: true, data: new DadosTokenJWT(tokenJWT) };
    } catch(error) {
        console.error(error);
        return { success: false, error: error.message };
    }
}

function handleLogin(usuario, res, jwt) {
    try {
        const token = jwt.sign({ nome: usuario.nome, email: usuario.email }, JWT_SECRET, { expiresIn: '10m' });
        return { success: true, token };
    } catch (error) {
        console.error("Erro durante o login:", error);
        return { success: false, error: "Ocorreu um erro durante o login do usuário." };
    }
}

// Uso:
const authResult = handleAuthentication(dados, manager, tokenService);
if (authResult.success) {
    return new ResponseEntity(authResult.data, HttpStatus.OK);
} else {
    return new ResponseEntity(authResult.error, HttpStatus.BAD_REQUEST);
}

// Uso para login:
const loginResult = handleLogin(usuario, res, jwt);
if (loginResult.success) {
    res.json({ mensagem: "Usuário logado com sucesso!", token: loginResult.token });
} else {
    res.status(500).json({ mensagem: loginResult.error });
}
















const Usuario = require('../models/Usuario')
require('dotenv').config()

const JWT_SECRET = process.env.JWT_SECRET

const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')


async function registrar(req, res) {
    const { nome, email, senha } = req.body

    const usuario = await Usuario.findOne({ email })

    if (usuario) {
        return res.status(400).json({ mensagem: "Este e-mail já está cadastrado!" })
    }

    const hash = await bcrypt.hash(senha, 10)

    const novoUsuario = new Usuario(
        {
            nome,
            email,
            senha: hash
        }
    )

    await novoUsuario.save()

    res.status(201).json({ mensagem: "Usuário cadastrado com sucesso!" })
}


async function login(req, res) {

    const { email, senha } = req.body

    const usuario = await Usuario.findOne({ email })

    if (!usuario) {
        return res.status(401).json({ mensagem: "Usuário não encontrado!" })
    }

    const senhaValida = await bcrypt.compare(senha, usuario.senha)

    if (!senhaValida) {
        return res.status(401).json({ mensagem: "Senha incorreta!" })
    }
    function handleAuthentication(dados, manager, tokenService) {
        try {
            const authenticationToken = new UsernamePasswordAuthenticationToken(dados.login, dados.senha);
            const authentication = manager.authenticate(authenticationToken);
    
            const tokenJWT = tokenService.gerarToken(authentication.principal);
    
            return { success: true, data: new DadosTokenJWT(tokenJWT) };
        } catch(error) {
            console.error(error);
            return { success: false, error: error.message };
        }
    }
    
    function login(usuario, res, jwt) {
        try {
            const token = jwt.sign({ nome: usuario.nome, email: usuario.email }, JWT_SECRET, { expiresIn: '10m' });
            return { success: true, token };
        } catch (error) {
            console.error("Erro durante o login:", error);
            return { success: false, error: "Ocorreu um erro durante o login do usuário." };
        }
    }
    
    // Uso:
    const authResult = handleAuthentication(dados, manager, tokenService);
    if (authResult.success) {
        return new ResponseEntity(authResult.data, HttpStatus.OK);
    } else {
        return new ResponseEntity(authResult.error, HttpStatus.BAD_REQUEST);
    }
    

}





module.exports = {
    registrar,
    login
}
























const Usuario = require('../models/Usuario');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const { UsernamePasswordAuthenticationToken, DadosTokenJWT, tokenService, manager } = require('./authentication'); // Supondo que você tenha as classes necessárias para autenticação

require('dotenv').config();
const JWT_SECRET = process.env.JWT_SECRET;

async function registrar(req, res) {
    const { nome, email, senha } = req.body;

    try {
        const usuario = await Usuario.findOne({ email });

        if (usuario) {
            return res.status(400).json({ mensagem: "Este e-mail já está cadastrado!" });
        }

        const hash = await bcrypt.hash(senha, 10);

        const novoUsuario = new Usuario({ nome, email, senha: hash });
        await novoUsuario.save();

        res.status(201).json({ mensagem: "Usuário cadastrado com sucesso!" });
    } catch (error) {
        console.error("Erro durante o registro:", error);
        res.status(500).json({ mensagem: "Ocorreu um erro durante o registro do usuário." });
    }
}

async function login(req, res) {
    const { email, senha } = req.body;

    try {
        const usuario = await Usuario.findOne({ email });

        if (!usuario) {
            return res.status(401).json({ mensagem: "Usuário não encontrado!" });
        }

        const senhaValida = await bcrypt.compare(senha, usuario.senha);

        if (!senhaValida) {
            return res.status(401).json({ mensagem: "Senha incorreta!" });
        }

        const token = jwt.sign({ nome: usuario.nome, email: usuario.email }, JWT_SECRET, { expiresIn: '10m' });
        res.json({ mensagem: "Usuário logado com sucesso!", token });
    } catch (error) {
        console.error("Erro durante o login:", error);
        res.status(500).json({ mensagem: "Ocorreu um erro durante o login do usuário." });
    }
}

module.exports = {
    registrar,
    login
};

